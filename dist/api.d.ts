/**
 * Financial Modeling Prep API
 * Financial Modeling Prep API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sam@sddproductions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface EndOfDayPrice
 */
export interface EndOfDayPrice {
    /**
     *
     * @type {string}
     * @memberof EndOfDayPrice
     */
    date: string;
    /**
     *
     * @type {number}
     * @memberof EndOfDayPrice
     */
    open: number;
    /**
     *
     * @type {number}
     * @memberof EndOfDayPrice
     */
    high: number;
    /**
     *
     * @type {number}
     * @memberof EndOfDayPrice
     */
    low: number;
    /**
     *
     * @type {number}
     * @memberof EndOfDayPrice
     */
    close: number;
    /**
     *
     * @type {number}
     * @memberof EndOfDayPrice
     */
    adjClose?: number;
    /**
     *
     * @type {number}
     * @memberof EndOfDayPrice
     */
    volume: number;
    /**
     *
     * @type {number}
     * @memberof EndOfDayPrice
     */
    unadjustedVolume?: number;
    /**
     *
     * @type {number}
     * @memberof EndOfDayPrice
     */
    change?: number;
    /**
     *
     * @type {number}
     * @memberof EndOfDayPrice
     */
    vwap?: number;
    /**
     *
     * @type {string}
     * @memberof EndOfDayPrice
     */
    label?: string;
    /**
     *
     * @type {number}
     * @memberof EndOfDayPrice
     */
    changeOverTime?: number;
}
/**
 *
 * @export
 * @interface EndOfDayPriceHistory
 */
export interface EndOfDayPriceHistory {
    /**
     *
     * @type {string}
     * @memberof EndOfDayPriceHistory
     */
    symbol?: string;
    /**
     *
     * @type {Array<EndOfDayPrice>}
     * @memberof EndOfDayPriceHistory
     */
    historical?: Array<EndOfDayPrice>;
}
/**
 *
 * @export
 * @interface OHVCVPrice
 */
export interface OHVCVPrice {
    /**
     *
     * @type {string}
     * @memberof OHVCVPrice
     */
    date: string;
    /**
     *
     * @type {number}
     * @memberof OHVCVPrice
     */
    open: number;
    /**
     *
     * @type {number}
     * @memberof OHVCVPrice
     */
    high: number;
    /**
     *
     * @type {number}
     * @memberof OHVCVPrice
     */
    low: number;
    /**
     *
     * @type {number}
     * @memberof OHVCVPrice
     */
    close: number;
    /**
     *
     * @type {number}
     * @memberof OHVCVPrice
     */
    volume: number;
}
/**
 *
 * @export
 * @interface Symbol
 */
export interface Symbol {
    /**
     *
     * @type {string}
     * @memberof Symbol
     */
    symbol: string;
    /**
     *
     * @type {string}
     * @memberof Symbol
     */
    name: string;
    /**
     *
     * @type {number}
     * @memberof Symbol
     */
    price: number;
    /**
     *
     * @type {string}
     * @memberof Symbol
     */
    exchange: string;
}
/**
 * HistoryApi - axios parameter creator
 * @export
 */
export declare const HistoryApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get Ticker price
     * @param {string} symbol Name of ticker
     * @param {string} [from] From date
     * @param {string} [to] To date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dailyPrices: (symbol: string, from?: string, to?: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Ticker price
     * @param {string} symbol Name of ticker
     * @param {'1min' | '5min' | '15min' | '30min' | '1hour' | '4hour'} resolution Time resolution
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    intraDayPrices: (symbol: string, resolution: '1min' | '5min' | '15min' | '30min' | '1hour' | '4hour', options?: any) => Promise<RequestArgs>;
};
/**
 * HistoryApi - functional programming interface
 * @export
 */
export declare const HistoryApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get Ticker price
     * @param {string} symbol Name of ticker
     * @param {string} [from] From date
     * @param {string} [to] To date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dailyPrices(symbol: string, from?: string, to?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EndOfDayPriceHistory>>;
    /**
     *
     * @summary Get Ticker price
     * @param {string} symbol Name of ticker
     * @param {'1min' | '5min' | '15min' | '30min' | '1hour' | '4hour'} resolution Time resolution
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    intraDayPrices(symbol: string, resolution: '1min' | '5min' | '15min' | '30min' | '1hour' | '4hour', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OHVCVPrice>>>;
};
/**
 * HistoryApi - factory interface
 * @export
 */
export declare const HistoryApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get Ticker price
     * @param {string} symbol Name of ticker
     * @param {string} [from] From date
     * @param {string} [to] To date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dailyPrices(symbol: string, from?: string, to?: string, options?: any): AxiosPromise<EndOfDayPriceHistory>;
    /**
     *
     * @summary Get Ticker price
     * @param {string} symbol Name of ticker
     * @param {'1min' | '5min' | '15min' | '30min' | '1hour' | '4hour'} resolution Time resolution
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    intraDayPrices(symbol: string, resolution: '1min' | '5min' | '15min' | '30min' | '1hour' | '4hour', options?: any): AxiosPromise<Array<OHVCVPrice>>;
};
/**
 * HistoryApi - object-oriented interface
 * @export
 * @class HistoryApi
 * @extends {BaseAPI}
 */
export declare class HistoryApi extends BaseAPI {
    /**
     *
     * @summary Get Ticker price
     * @param {string} symbol Name of ticker
     * @param {string} [from] From date
     * @param {string} [to] To date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoryApi
     */
    dailyPrices(symbol: string, from?: string, to?: string, options?: any): Promise<import("axios").AxiosResponse<EndOfDayPriceHistory>>;
    /**
     *
     * @summary Get Ticker price
     * @param {string} symbol Name of ticker
     * @param {'1min' | '5min' | '15min' | '30min' | '1hour' | '4hour'} resolution Time resolution
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoryApi
     */
    intraDayPrices(symbol: string, resolution: '1min' | '5min' | '15min' | '30min' | '1hour' | '4hour', options?: any): Promise<import("axios").AxiosResponse<OHVCVPrice[]>>;
}
/**
 * ListApi - axios parameter creator
 * @export
 */
export declare const ListApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get list of symbols
     * @param {'stock' | 'available-traded' | 'etf'} type Type of symbols to list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSymbols: (type: 'stock' | 'available-traded' | 'etf', options?: any) => Promise<RequestArgs>;
};
/**
 * ListApi - functional programming interface
 * @export
 */
export declare const ListApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get list of symbols
     * @param {'stock' | 'available-traded' | 'etf'} type Type of symbols to list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSymbols(type: 'stock' | 'available-traded' | 'etf', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Symbol>>>;
};
/**
 * ListApi - factory interface
 * @export
 */
export declare const ListApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get list of symbols
     * @param {'stock' | 'available-traded' | 'etf'} type Type of symbols to list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSymbols(type: 'stock' | 'available-traded' | 'etf', options?: any): AxiosPromise<Array<Symbol>>;
};
/**
 * ListApi - object-oriented interface
 * @export
 * @class ListApi
 * @extends {BaseAPI}
 */
export declare class ListApi extends BaseAPI {
    /**
     *
     * @summary Get list of symbols
     * @param {'stock' | 'available-traded' | 'etf'} type Type of symbols to list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListApi
     */
    listSymbols(type: 'stock' | 'available-traded' | 'etf', options?: any): Promise<import("axios").AxiosResponse<Symbol[]>>;
}
