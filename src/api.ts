/* tslint:disable */
/* eslint-disable */
/**
 * Financial Modeling Prep API
 * Financial Modeling Prep API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: sam@sddproductions.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface EndOfDayPrice
 */
export interface EndOfDayPrice {
    /**
     * 
     * @type {string}
     * @memberof EndOfDayPrice
     */
    date: string;
    /**
     * 
     * @type {number}
     * @memberof EndOfDayPrice
     */
    open: number;
    /**
     * 
     * @type {number}
     * @memberof EndOfDayPrice
     */
    high: number;
    /**
     * 
     * @type {number}
     * @memberof EndOfDayPrice
     */
    low: number;
    /**
     * 
     * @type {number}
     * @memberof EndOfDayPrice
     */
    close: number;
    /**
     * 
     * @type {number}
     * @memberof EndOfDayPrice
     */
    adjClose?: number;
    /**
     * 
     * @type {number}
     * @memberof EndOfDayPrice
     */
    volume: number;
    /**
     * 
     * @type {number}
     * @memberof EndOfDayPrice
     */
    unadjustedVolume?: number;
    /**
     * 
     * @type {number}
     * @memberof EndOfDayPrice
     */
    change?: number;
    /**
     * 
     * @type {number}
     * @memberof EndOfDayPrice
     */
    vwap?: number;
    /**
     * 
     * @type {string}
     * @memberof EndOfDayPrice
     */
    label?: string;
    /**
     * 
     * @type {number}
     * @memberof EndOfDayPrice
     */
    changeOverTime?: number;
}
/**
 * 
 * @export
 * @interface EndOfDayPriceHistory
 */
export interface EndOfDayPriceHistory {
    /**
     * 
     * @type {string}
     * @memberof EndOfDayPriceHistory
     */
    symbol?: string;
    /**
     * 
     * @type {Array<EndOfDayPrice>}
     * @memberof EndOfDayPriceHistory
     */
    historical?: Array<EndOfDayPrice>;
}
/**
 * 
 * @export
 * @interface OHVCVPrice
 */
export interface OHVCVPrice {
    /**
     * 
     * @type {string}
     * @memberof OHVCVPrice
     */
    date: string;
    /**
     * 
     * @type {number}
     * @memberof OHVCVPrice
     */
    open: number;
    /**
     * 
     * @type {number}
     * @memberof OHVCVPrice
     */
    high: number;
    /**
     * 
     * @type {number}
     * @memberof OHVCVPrice
     */
    low: number;
    /**
     * 
     * @type {number}
     * @memberof OHVCVPrice
     */
    close: number;
    /**
     * 
     * @type {number}
     * @memberof OHVCVPrice
     */
    volume: number;
}
/**
 * 
 * @export
 * @interface Symbol
 */
export interface Symbol {
    /**
     * 
     * @type {string}
     * @memberof Symbol
     */
    symbol: string;
    /**
     * 
     * @type {string}
     * @memberof Symbol
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof Symbol
     */
    price: number;
    /**
     * 
     * @type {string}
     * @memberof Symbol
     */
    exchange: string;
}

/**
 * HistoryApi - axios parameter creator
 * @export
 */
export const HistoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Ticker price
         * @param {string} symbol Name of ticker
         * @param {string} [from] From date
         * @param {string} [to] To date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dailyPrices: async (symbol: string, from?: string, to?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('dailyPrices', 'symbol', symbol)
            const localVarPath = `/historical-price-full/{symbol}`
                .replace(`{${"symbol"}}`, encodeURIComponent(String(symbol)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Ticker price
         * @param {string} symbol Name of ticker
         * @param {'1min' | '5min' | '15min' | '30min' | '1hour' | '4hour'} resolution Time resolution
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        intraDayPrices: async (symbol: string, resolution: '1min' | '5min' | '15min' | '30min' | '1hour' | '4hour', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            assertParamExists('intraDayPrices', 'symbol', symbol)
            // verify required parameter 'resolution' is not null or undefined
            assertParamExists('intraDayPrices', 'resolution', resolution)
            const localVarPath = `/historical-chart/{resolution}/{symbol}`
                .replace(`{${"symbol"}}`, encodeURIComponent(String(symbol)))
                .replace(`{${"resolution"}}`, encodeURIComponent(String(resolution)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HistoryApi - functional programming interface
 * @export
 */
export const HistoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HistoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Ticker price
         * @param {string} symbol Name of ticker
         * @param {string} [from] From date
         * @param {string} [to] To date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dailyPrices(symbol: string, from?: string, to?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EndOfDayPriceHistory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dailyPrices(symbol, from, to, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Ticker price
         * @param {string} symbol Name of ticker
         * @param {'1min' | '5min' | '15min' | '30min' | '1hour' | '4hour'} resolution Time resolution
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async intraDayPrices(symbol: string, resolution: '1min' | '5min' | '15min' | '30min' | '1hour' | '4hour', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OHVCVPrice>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.intraDayPrices(symbol, resolution, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HistoryApi - factory interface
 * @export
 */
export const HistoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HistoryApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Ticker price
         * @param {string} symbol Name of ticker
         * @param {string} [from] From date
         * @param {string} [to] To date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dailyPrices(symbol: string, from?: string, to?: string, options?: any): AxiosPromise<EndOfDayPriceHistory> {
            return localVarFp.dailyPrices(symbol, from, to, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Ticker price
         * @param {string} symbol Name of ticker
         * @param {'1min' | '5min' | '15min' | '30min' | '1hour' | '4hour'} resolution Time resolution
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        intraDayPrices(symbol: string, resolution: '1min' | '5min' | '15min' | '30min' | '1hour' | '4hour', options?: any): AxiosPromise<Array<OHVCVPrice>> {
            return localVarFp.intraDayPrices(symbol, resolution, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HistoryApi - object-oriented interface
 * @export
 * @class HistoryApi
 * @extends {BaseAPI}
 */
export class HistoryApi extends BaseAPI {
    /**
     * 
     * @summary Get Ticker price
     * @param {string} symbol Name of ticker
     * @param {string} [from] From date
     * @param {string} [to] To date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoryApi
     */
    public dailyPrices(symbol: string, from?: string, to?: string, options?: any) {
        return HistoryApiFp(this.configuration).dailyPrices(symbol, from, to, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Ticker price
     * @param {string} symbol Name of ticker
     * @param {'1min' | '5min' | '15min' | '30min' | '1hour' | '4hour'} resolution Time resolution
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HistoryApi
     */
    public intraDayPrices(symbol: string, resolution: '1min' | '5min' | '15min' | '30min' | '1hour' | '4hour', options?: any) {
        return HistoryApiFp(this.configuration).intraDayPrices(symbol, resolution, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ListApi - axios parameter creator
 * @export
 */
export const ListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get list of symbols
         * @param {'stock' | 'available-traded' | 'etf'} type Type of symbols to list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSymbols: async (type: 'stock' | 'available-traded' | 'etf', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            assertParamExists('listSymbols', 'type', type)
            const localVarPath = `/{type}/list`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication api_key required
            await setApiKeyToObject(localVarQueryParameter, "apikey", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListApi - functional programming interface
 * @export
 */
export const ListApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get list of symbols
         * @param {'stock' | 'available-traded' | 'etf'} type Type of symbols to list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSymbols(type: 'stock' | 'available-traded' | 'etf', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Symbol>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSymbols(type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListApi - factory interface
 * @export
 */
export const ListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListApiFp(configuration)
    return {
        /**
         * 
         * @summary Get list of symbols
         * @param {'stock' | 'available-traded' | 'etf'} type Type of symbols to list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSymbols(type: 'stock' | 'available-traded' | 'etf', options?: any): AxiosPromise<Array<Symbol>> {
            return localVarFp.listSymbols(type, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListApi - object-oriented interface
 * @export
 * @class ListApi
 * @extends {BaseAPI}
 */
export class ListApi extends BaseAPI {
    /**
     * 
     * @summary Get list of symbols
     * @param {'stock' | 'available-traded' | 'etf'} type Type of symbols to list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListApi
     */
    public listSymbols(type: 'stock' | 'available-traded' | 'etf', options?: any) {
        return ListApiFp(this.configuration).listSymbols(type, options).then((request) => request(this.axios, this.basePath));
    }
}


